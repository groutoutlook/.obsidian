/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeStatsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiKey: ""
};
var IGNORED_KEYS = /* @__PURE__ */ new Set([
  "Meta",
  "Alt",
  "Shift",
  "Control",
  "CapsLock",
  "Tab",
  "Escape",
  "ArrowUp",
  "ArrowDown",
  "ArrowLeft",
  "ArrowRight",
  "Home",
  "End",
  "PageUp",
  "PageDown",
  "Insert",
  "Delete",
  "ContextMenu",
  "ScrollLock",
  "Pause",
  "NumLock",
  "F1",
  "F2",
  "F3",
  "F4",
  "F5",
  "F6",
  "F7",
  "F8",
  "F9",
  "F10",
  "F11",
  "F12"
]);
var ApiKeyModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Enter Code::Stats API Key" });
    const settings = {
      apiKey: this.plugin.settings.apiKey
    };
    new import_obsidian.Setting(contentEl).setName("API Key").setDesc("Get your API key from your Code::Stats profile page.").addText((text) => text.setPlaceholder("Enter your API key").setValue(settings.apiKey).onChange(async (value) => {
      settings.apiKey = value.trim();
    }));
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Save").setCta().onClick(async () => {
      if (settings.apiKey) {
        await this.plugin.saveSettings(settings);
        new import_obsidian.Notice("Code::Stats API Key saved.");
        this.close();
      } else {
        new import_obsidian.Notice("API Key cannot be empty.");
      }
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CodeStatsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Code::Stats Settings" });
    const settings = {
      apiKey: this.plugin.settings.apiKey
    };
    new import_obsidian.Setting(containerEl).setName("Code::stats API key").setDesc("It can be found or created on https://codestats.net/my/machines page").addText((text) => text.setPlaceholder("Enter your API key").setValue(settings.apiKey).onChange((0, import_obsidian.debounce)(async (value) => {
      settings.apiKey = value.trim();
      await this.plugin.saveSettings(settings);
    }, 600)));
  }
};
var CodeStatsPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.pulseIntervalId = null;
    this.xpCounter = 0;
    this.statusBarItemEl = null;
    // --- Core Logic ---
    this.handleKeyPress = (evt) => {
      if (evt.ctrlKey || evt.metaKey || evt.altKey || evt.shiftKey) {
        return;
      }
      if (IGNORED_KEYS.has(evt.key)) {
        return;
      }
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      const editor = view == null ? void 0 : view.editor;
      if (!editor || !editor.hasFocus() || !editor.getCursor()) {
        return;
      }
      this.xpCounter += 1;
    };
    this.saveSettings = async (settings) => {
      await this.saveData(settings);
      this.resetInterval();
    };
    // --- API Interaction ---
    this.sendPulse = async () => {
      if (this.xpCounter === 0) {
        return;
      }
      if (!this.settings.apiKey) {
        return;
      }
      const xpToSend = this.xpCounter;
      this.xpCounter = 0;
      const url = "https://codestats.net/api/my/pulses";
      const payload = {
        coded_at: this.getISOTimestamp(),
        xps: [{
          language: "Markdown",
          xp: xpToSend
        }]
      };
      try {
        const response = await (0, import_obsidian.requestUrl)({
          url,
          method: "POST",
          headers: {
            "X-API-Token": this.settings.apiKey,
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          body: JSON.stringify(payload),
          throw: false
          // Handle status codes manually
        });
        if (response.status >= 300) {
          console.error(`Code::Stats Pulse Error: ${response.status}. Response: ${response.text}`);
          if (response.status === 401) {
            new import_obsidian.Notice("Code::Stats: Invalid API Key. Please update it in settings.");
          } else {
            new import_obsidian.Notice(`Code::Stats Pulse Error: ${response.status}`);
          }
          this.xpCounter += xpToSend;
        } else {
          console.log(`Code::Stats Pulse Success: ${response.status}. Response: ${response.text}`);
        }
      } catch (error) {
        console.error("Code::Stats Pulse Network Error:", error);
        new import_obsidian.Notice("Code::Stats: Network error during pulse. Check console.");
        this.xpCounter += xpToSend;
      } finally {
        this.updateStatusBar();
      }
    };
    // --- Interval Management ---
    this.resetInterval = () => {
      if (this.pulseIntervalId !== null) {
        window.clearInterval(this.pulseIntervalId);
        this.pulseIntervalId = null;
      }
      const intervalMillis = 10 * 1e3;
      this.pulseIntervalId = window.setInterval(this.sendPulse, intervalMillis);
      this.registerInterval(this.pulseIntervalId);
      this.updateStatusBar();
    };
    this.getISOTimestamp = () => {
      const date = /* @__PURE__ */ new Date();
      const offset = -date.getTimezoneOffset();
      const prefix = offset >= 0 ? "+" : "-";
      function pad(num) {
        const norm = Math.abs(Math.floor(num));
        return (norm < 10 ? "0" : "") + norm;
      }
      return date.getFullYear() + "-" + pad(date.getMonth() + 1) + "-" + pad(date.getDate()) + "T" + pad(date.getHours()) + ":" + pad(date.getMinutes()) + ":" + pad(date.getSeconds()) + prefix + pad(offset / 60) + pad(offset % 60);
    };
    // --- UI Updates ---
    this.updateStatusBar = () => {
      if (!this.statusBarItemEl) {
        this.statusBarItemEl = this.addStatusBarItem();
      }
      let text;
      let title;
      if (!this.settings.apiKey) {
        text = "C:S [!]";
        title = "Code::Stats: API Key needed";
      } else {
        text = "C:S";
        title = "Code::Stats: Connected";
      }
      this.statusBarItemEl.setText(text);
      this.statusBarItemEl.setAttribute("aria-label", title);
      this.statusBarItemEl.setAttribute("title", title);
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new CodeStatsSettingTab(this.app, this));
    this.apiKeyModal = new ApiKeyModal(this.app, this);
    this.addCommand({
      id: "codestats-open-key-modal",
      name: "Code::Stats: Enter API key",
      callback: () => {
        this.apiKeyModal.open();
      }
    });
    this.registerDomEvent(document, "keyup", this.handleKeyPress);
    if (!this.settings.apiKey) {
      new import_obsidian.Notice("Code::Stats API Key needed. Please configure it in settings or use the command.");
      return;
    }
    this.resetInterval();
  }
  onunload() {
    if (this.xpCounter > 0 && this.settings.apiKey) {
      void this.sendPulse();
    }
    if (this.pulseIntervalId !== null) {
      window.clearInterval(this.pulseIntervalId);
      this.pulseIntervalId = null;
    }
  }
  // --- Settings Management ---
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
};

/* nosourcemap */